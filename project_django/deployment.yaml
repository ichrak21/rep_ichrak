apiVersion: v1
kind: Namespace
metadata:
  name: referential-dev
---
kind: Service
apiVersion: v1
metadata:
  name: referential-loadbalancer-service
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    env: development
    project: referential
spec:
  selector:
    app: django-app
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 8000
  type: LoadBalancer
---
apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: referentiels-deployment
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: "100%"
  selector:
    matchLabels:
      app: django-app
  replicas: 1 # tells deployment to run 2 pods matching the template
  template:
    metadata:
      labels:
        app: django-app
        framework: django
    spec:
#      affinity:
#        podAntiAffinity:
#          requiredDuringSchedulingIgnoredDuringExecution:
#            - labelSelector:
#                matchExpressions:
#                  - key: app
#                    operator: In
#                    values:
#                      - django-app
#              topologyKey: "kubernetes.io/hostname"
      containers:
      - name:  django-app
        image: ccireferential.azurecr.io/referentiels/v2:latest
        ports:
          - containerPort: 8000
        command: ['bash', 'init_server.sh']
        imagePullPolicy: Always
        readinessProbe:
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 2
          httpGet:
            path: /hello_world/?format=json
            port: 8000
            httpHeaders:
            - name: Custom-Header
              value: Awesome
        livenessProbe:
          initialDelaySeconds: 30
          periodSeconds: 20
          httpGet:
            path: /hello_world/?format=json
            port: 8000
            httpHeaders:
            - name: Custom-Header
              value: Awesome
        resources:
          requests:
            memory: "100Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: 1
      terminationGracePeriodSeconds: 30
      imagePullSecrets:
        - name: regcred
---
kind: Secret
apiVersion: v1
metadata:
  name: regcred
data:
  .dockerconfigjson: ewogICAgICAgICJhdXRocyI6IHsKICAgICAgICAgICAgICAgICJjY2lyZWZlcmVudGlhbC5henVyZWNyLmlvIjogewogICAgICAgICAgICAgICAgICAgICAgICAiYXV0aCI6ICJRME5KVW1WbVpYSmxiblJwWVd3NlltSm5TRk5KVmpKNFJFb3lhbXRQWlZSNVNDOVhWazA5VG5kamFGaERjRXc9IgogICAgICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgIkh0dHBIZWFkZXJzIjogewogICAgICAgICAgICAgICAgIlVzZXItQWdlbnQiOiAiRG9ja2VyLUNsaWVudC8zLjAuNSAobGludXgpIgogICAgICAgIH0KfQ==
type: kubernetes.io/dockerconfigjson
---
apiVersion: batch/v1
kind: Job
metadata:
  name: referential-job
spec:
  template:
    spec:
      containers:
      - name: referential-job
        image: ccireferential.azurecr.io/referentiels/v2:latest
        command: ['bash', 'update_db.sh']
      restartPolicy: Never
      imagePullSecrets:
        - name: regcred
  backoffLimit: 4
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: log-manager
rules:
- apiGroups: ["", "extensions", "apps", "batch"]
  resources: ["deployments", "replicasets", "pods", "jobs","pods/log","pods/status"]
  verbs: ["get", "list", "watch"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: referential-dev-account
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: deployment-manager-binding
subjects:
- kind: ServiceAccount
  name: referential-dev-account
  apiGroup: ""
roleRef:
  kind: Role
  name: log-manager
  apiGroup: rbac.authorization.k8s.io